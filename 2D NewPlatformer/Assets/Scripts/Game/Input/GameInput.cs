//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""AllBindings"",
            ""id"": ""c3dda7cf-fc68-4cd9-97b5-88da20cc22d3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""19d2fa71-4c36-420f-b5e0-b27f2c812e83"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""68a71d45-3ddc-43c6-9c79-c37ceeb7e2b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""3eb0c10f-192e-4442-a046-0260017e0fc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestingKey"",
                    ""type"": ""Button"",
                    ""id"": ""2833ddc1-a96c-43f3-8de9-8742f631d35a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReturnToCheckpoint"",
                    ""type"": ""Button"",
                    ""id"": ""383bfb7f-3a89-4063-86f4-4541e7677f0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangePlayer"",
                    ""type"": ""Button"",
                    ""id"": ""8228499d-5b42-4408-9383-726da31fcc52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""68dfca7e-12b0-499f-9ff3-471d9596fa02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""44be3afc-e98d-4a85-8af6-e684e9554a67"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e81c843-48f9-4217-a49b-bfe811ff9df7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""83a4b1bc-ab42-44c7-b920-d14b16e6b3b3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""60177d2f-c50f-4c08-b246-47ee5c165809"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74fb09f0-c83a-40d3-8572-a8ba274eaf81"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc0f1fc0-8bcf-44f1-87ea-a58370e81504"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestingKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""096b8fc4-c3d7-4cfe-bf72-8e978b23ba6b"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReturnToCheckpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ef0005b-5101-46a3-b9d9-77b4ab7fadbb"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""468169fa-b93a-4b2e-83e9-1e2e157f85ce"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AllBindings
        m_AllBindings = asset.FindActionMap("AllBindings", throwIfNotFound: true);
        m_AllBindings_Movement = m_AllBindings.FindAction("Movement", throwIfNotFound: true);
        m_AllBindings_Jump = m_AllBindings.FindAction("Jump", throwIfNotFound: true);
        m_AllBindings_Interact = m_AllBindings.FindAction("Interact", throwIfNotFound: true);
        m_AllBindings_TestingKey = m_AllBindings.FindAction("TestingKey", throwIfNotFound: true);
        m_AllBindings_ReturnToCheckpoint = m_AllBindings.FindAction("ReturnToCheckpoint", throwIfNotFound: true);
        m_AllBindings_ChangePlayer = m_AllBindings.FindAction("ChangePlayer", throwIfNotFound: true);
        m_AllBindings_PauseGame = m_AllBindings.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AllBindings
    private readonly InputActionMap m_AllBindings;
    private List<IAllBindingsActions> m_AllBindingsActionsCallbackInterfaces = new List<IAllBindingsActions>();
    private readonly InputAction m_AllBindings_Movement;
    private readonly InputAction m_AllBindings_Jump;
    private readonly InputAction m_AllBindings_Interact;
    private readonly InputAction m_AllBindings_TestingKey;
    private readonly InputAction m_AllBindings_ReturnToCheckpoint;
    private readonly InputAction m_AllBindings_ChangePlayer;
    private readonly InputAction m_AllBindings_PauseGame;
    public struct AllBindingsActions
    {
        private @GameInput m_Wrapper;
        public AllBindingsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_AllBindings_Movement;
        public InputAction @Jump => m_Wrapper.m_AllBindings_Jump;
        public InputAction @Interact => m_Wrapper.m_AllBindings_Interact;
        public InputAction @TestingKey => m_Wrapper.m_AllBindings_TestingKey;
        public InputAction @ReturnToCheckpoint => m_Wrapper.m_AllBindings_ReturnToCheckpoint;
        public InputAction @ChangePlayer => m_Wrapper.m_AllBindings_ChangePlayer;
        public InputAction @PauseGame => m_Wrapper.m_AllBindings_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_AllBindings; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AllBindingsActions set) { return set.Get(); }
        public void AddCallbacks(IAllBindingsActions instance)
        {
            if (instance == null || m_Wrapper.m_AllBindingsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AllBindingsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @TestingKey.started += instance.OnTestingKey;
            @TestingKey.performed += instance.OnTestingKey;
            @TestingKey.canceled += instance.OnTestingKey;
            @ReturnToCheckpoint.started += instance.OnReturnToCheckpoint;
            @ReturnToCheckpoint.performed += instance.OnReturnToCheckpoint;
            @ReturnToCheckpoint.canceled += instance.OnReturnToCheckpoint;
            @ChangePlayer.started += instance.OnChangePlayer;
            @ChangePlayer.performed += instance.OnChangePlayer;
            @ChangePlayer.canceled += instance.OnChangePlayer;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IAllBindingsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @TestingKey.started -= instance.OnTestingKey;
            @TestingKey.performed -= instance.OnTestingKey;
            @TestingKey.canceled -= instance.OnTestingKey;
            @ReturnToCheckpoint.started -= instance.OnReturnToCheckpoint;
            @ReturnToCheckpoint.performed -= instance.OnReturnToCheckpoint;
            @ReturnToCheckpoint.canceled -= instance.OnReturnToCheckpoint;
            @ChangePlayer.started -= instance.OnChangePlayer;
            @ChangePlayer.performed -= instance.OnChangePlayer;
            @ChangePlayer.canceled -= instance.OnChangePlayer;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IAllBindingsActions instance)
        {
            if (m_Wrapper.m_AllBindingsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAllBindingsActions instance)
        {
            foreach (var item in m_Wrapper.m_AllBindingsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AllBindingsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AllBindingsActions @AllBindings => new AllBindingsActions(this);
    public interface IAllBindingsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnTestingKey(InputAction.CallbackContext context);
        void OnReturnToCheckpoint(InputAction.CallbackContext context);
        void OnChangePlayer(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
